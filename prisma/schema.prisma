datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model category {
  category_id Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model business {
  business_id                      String   @id @default(uuid())
  business_legal_name              String
  business_rut                     String   @unique
  business_display_name            String
  business_email                   String   @unique
  business_main_phone              String
  business_secondary_phone         String?
  business_description             String?
  legal_representative_firstname   String
  legal_representative_lastname    String
  legal_representative_rut         String
  business_admin_profile_id        String   @unique
  business_website                 String?
  business_facebook                String?
  business_instagram               String?
  business_whatsapp                String?
  business_logo                    String?
  business_cover                   String?
  created_at                       DateTime @default(now())
  updated_at                       DateTime @updatedAt
  subscription_id                  Int? @unique
  status_id                        Int
  business_tiktok                  String?
  is_featured                      Boolean  @default(false)
  business_youtube                 String?
  business_x                       String?

  @@index([subscription_id])
  @@index([status_id])
  @@index([business_admin_profile_id])

  subscription subscription? @relation("CurrentSubscription", fields: [subscription_id], references: [subscription_id])
  status business_status @relation(fields: [status_id], references: [status_id], onUpdate: Cascade) // Removido onDelete: SetNull
  adminProfile profile @relation(fields: [business_admin_profile_id], references: [id], onUpdate: Cascade, onDelete: Restrict)

  branches business_branch[]
  changes business_change[]
  comments business_comment[]
  coupons coupon[]
  subscriptions subscription[] @relation("AllSubscriptions")
}

model business_branch {
  branch_id           String   @id @default(uuid())
  branch_address      String
  branch_commune      String
  branch_city         String
  branch_phone        String?
  branch_latitude     Float?
  branch_longitude    Float?
  branch_address_type String
  branch_created_by   String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  business_id         String

  @@index([branch_created_by])
  @@index([business_id])

  createdBy profile @relation(fields: [branch_created_by], references: [id], onUpdate: Cascade, onDelete: Restrict)
  business business? @relation(fields: [business_id], references: [business_id], onUpdate: Cascade, onDelete: Cascade)
}

model business_change_comment {
  business_change_comment_id String   @id @default(uuid())
  business_change_id         String
  comment                    String
  author_role                String
  created_at                 DateTime @default(now())

  @@index([business_change_id])

  businessChange business_change @relation(fields: [business_change_id], references: [business_change_id], onDelete: Cascade)
}

model business_change_status {
  business_change_status_id Int      @id @default(autoincrement())
  status_name               String
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  changes business_change[]
}

model business_change {
  business_change_id               String   @id @default(uuid())
  business_id                      String   @unique
  business_legal_name              String
  business_rut                     String  @unique
  business_display_name            String
  business_description             String?
  legal_representative_firstname   String?
  legal_representative_lastname    String?
  legal_representative_rut         String?
  reviewer_id                      String?
  change_status_id                 Int
  created_at                       DateTime @default(now())
  updated_at                       DateTime @updatedAt

  @@index([change_status_id])
  @@index([business_id])
  @@index([business_rut])

  changeStatus business_change_status @relation(fields: [change_status_id], references: [business_change_status_id], onUpdate: Cascade, onDelete: Restrict)
  business business @relation(fields: [business_id], references: [business_id], onUpdate: Cascade, onDelete: Cascade)

  comments business_change_comment[]
}

model business_comment {
  business_comment_id String   @id @default(uuid())
  business_id         String
  comment             String
  author_role         String
  created_at          DateTime @default(now())

  @@index([business_id])

  business business @relation(fields: [business_id], references: [business_id], onUpdate: Cascade, onDelete: Cascade)
}

model business_status_log {
  status_log_id Int      @id @default(autoincrement())
  status_id     Int
  user_id       String
  created_at    DateTime @default(now())

  @@index([status_id])
  @@index([user_id])

  status business_status @relation(fields: [status_id], references: [status_id], onUpdate: Cascade, onDelete: Restrict)
  user profile @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model business_status {
  status_id   Int    @id @default(autoincrement())
  status      String
  description String?

  businesses business[]
  statusLogs business_status_log[]
}

model coupon_approve_status {
  coupon_approve_status_id Int      @id @default(autoincrement())
  status                   String
  description              String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

model coupon_comment {
  coupon_comment_id String   @id @default(uuid())
  comment           String
  author_role       String
  created_at        DateTime @default(now())
  coupon_id         String

  @@index([coupon_id])

  coupon coupon? @relation(fields: [coupon_id], references: [coupon_id], onUpdate: Cascade, onDelete: Cascade)
}

model coupon_publication_status {
  coupon_publication_status_id Int      @id @default(autoincrement())
  status                       String
  description                  String?
}

model coupon_redeem {
  coupon_redeem_id String   @id @default(uuid())
  redeem_count     Int      @default(0)
  request_count    Int      @default(0)
  redeem_code      String   @unique
  coupon_id        String

  @@index([coupon_id])

  coupon coupon? @relation(fields: [coupon_id], references: [coupon_id], onUpdate: Cascade, onDelete: Restrict)
}

model coupon_status {
  status_id   Int    @id @default(autoincrement())
  status      String
  description String?

  coupons coupon[] // Relación inversa que apunta a los cupones asociados con este estado.
}

model coupon {
  coupon_id              String   @id @default(uuid())
  title                  String
  promo_type             String
  discount_amount        Int?
  discount_percentage    Int?
  another_promo_type     String?
  coupon_code            String?
  conditions             String?
  featured_image         String?
  redemption_type        String
  redemption_link        String?
  redemption_addresses   Json     @default("[]")
  max_redeems_per_promo  Int      @default(0)
  max_redeems_per_user   Int      @default(1)
  start_date             DateTime
  end_date               DateTime
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  business_id            String
  status_id              Int
  categories             Int[]
  is_featured            Boolean  @default(false)

  @@index([business_id])
  @@index([status_id])

  business business @relation(fields: [business_id], references: [business_id], onUpdate: Cascade, onDelete: Cascade)
  status coupon_status @relation(fields: [status_id], references: [status_id], onUpdate: Cascade, onDelete: Restrict)

  comments coupon_comment[]
  redeems coupon_redeem[]
}

model profile {
  id                    String  @id @default(uuid())
  firstname             String
  lastname              String
  email                 String
  role                  String
  birthday              String?
  gender                String?
  phone                 String?
  terms                 String  @default("No")
  is_active             Boolean @default(true)
  has_access_to_business Boolean @default(true) // Nuevo campo para indicar si tiene acceso a algún comercio

  businesses business[]
  branches business_branch[]
  statusLogs business_status_log[]
}

model plan {
  plan_id                    Int      @id @default(autoincrement())
  name                       String   @unique
  description                String?
  cost                       Float
  is_active                  Boolean  @default(true) // Indica si el plan está activo en general
  is_available_for_subscription Boolean @default(true) // Indica si el plan se puede contratar actualmente
  created_at                 DateTime @default(now())
  updated_at                 DateTime @default(now())

  subscriptions subscription[]
}

model subscription {
  subscription_id Int      @id @default(autoincrement())
  start_date      DateTime @default(now())
  end_date        DateTime @default(now())
  total_cost      Float
  discount        Float?
  is_active       Boolean  @default(true) // Indica si la suscripción está activa
  plan_id         Int
  business_id     String

  plan            plan    @relation(fields: [plan_id], references: [plan_id], onUpdate: Cascade, onDelete: Restrict)
  business        business @relation("AllSubscriptions", fields: [business_id], references: [business_id], onUpdate: Cascade, onDelete: Cascade)
  currentSubscriptionBusiness business? @relation("CurrentSubscription")
}

model tax_iva {
  tax_id      Int      @id @default(1)
  rate        Float
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@unique([tax_id])
}